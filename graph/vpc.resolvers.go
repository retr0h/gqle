package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"

	"go-graphql-api/graph/model"
)

// CreateVpc is the resolver for the CreateVPC field.
func (r *mutationResolver) CreateVpc(ctx context.Context, input model.NewVpc) (*model.Vpc, error) {
	panic(fmt.Errorf("not implemented: CreateVpc - CreateVPC"))
}

// UpdateVpc is the resolver for the UpdateVPC field.
func (r *mutationResolver) UpdateVpc(ctx context.Context, postID int, input *model.NewVpc) (*model.Vpc, error) {
	panic(fmt.Errorf("not implemented: UpdateVpc - UpdateVPC"))
}

// GetAllVPCs is the resolver for the GetAllVPCs field.
func (r *queryResolver) GetAllVPCs(ctx context.Context) ([]*model.Vpc, error) {
	vpcs := []*model.Vpc{}

	getVPCs := r.Database.Model(&vpcs).Find(&vpcs)

	if getVPCs.Error != nil {
		return nil, getVPCs.Error
	}
	return vpcs, nil
}

// GetOneVpc is the resolver for the GetOneVPC field.
func (r *queryResolver) GetOneVpc(ctx context.Context, id int) (*model.Vpc, error) {
	vpc := model.Vpc{}

	if err := r.Database.Find(&vpc, id).Error; err != nil {
		return nil, err
	}

	return &vpc, nil
}
